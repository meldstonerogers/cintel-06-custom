[{"name": "app.py", "content": "from faicons import icon_svg\nimport pandas as pd\nimport pyarrow as pa\nfrom shinyswatch import theme \nimport plotly.express as px\nfrom shinywidgets import render_widget, render_plotly\nfrom pathlib import Path\nfrom shiny import reactive, App, ui \nfrom shiny.express import input, render, ui\nimport shinylive\n\n#ui.page_opts(\n#    title=\"This is Bananas!\", \n #   theme=theme.minty, \n  #  style=\"text-align: center; font-size: 30px; font-weight: bold;\")\n    \nwith ui.sidebar(title=\"Filter Controls\", bg=\"#8D6B94\"):\n    options = [\"Brazil\", \"Colombia\", \"Costa Rica\", \"Ecuado\", \"Guatemala\", \"Honduras\", \"India\", \"Philippines\"]\n    ui.input_checkbox_group(\n        \"selected_region_list\",\n        \"Select Region\",\n        choices = [\"Brazil\", \"Colombia\", \"Costa Rica\", \"Ecuado\", \"Guatemala\", \"Honduras\", \"India\", \"Philippines\"],\n        selected=[\"Brazil\", \"Colombia\", \"Costa Rica\", \"Ecuado\", \"Guatemala\", \"Honduras\", \"India\", \"Philippines\"],\n    )\n    #ui.input_checkbox(\"Region_select_all\", \"Select All\", value=True),\n\n    ui.input_selectize(\n    \"selected_variety_list\",\n    \"Choose banana variety(ies)\",\n    [\"Burro\", \"Cavendish\", \"Fehi\", \"Manzano\", \"Plantain\"],\n    multiple=True,\n    selected=\"Burro\",\n    options=(\n        {\n            \"placeholder\": \"Enter text\",\n            \"render\": ui.js_eval(\n                '{option: function(item, escape) {return \"<div><strong>Select \" + escape(item.label) + \"</strong></div>\";}}'\n            ),\n            \"create\": True,\n        }\n    ),    \n)\n    ui.div(\n            ui.hr(),  # Use ui.hr() to add a horizontal rule to the sidebar \n            style=\"border-top: 2px solid #495569; margin: 10px 0;\"  # Custom style for the horizontal rule\n        )     \n    ui.h4(\"Interactive Scatterplot\")\n    \n    # Dropdown for selecting x and y axes for the scatter plot\n    ui.input_selectize(\"x_column_scatter\", \"Select X Variable:\", [\"quality_score\", \"weight_g\", \"length_cm\"])\n    ui.input_selectize(\"y_column_scatter\", \"Select Y Variable:\", [\"quality_score\", \"weight_g\", \"length_cm\"], selected=\"weight_g\")\n    @render.text\n    def select():\n        return f\"{input.selectize()}\"  \n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\n            \"This is Bananas!\",\n            style=\"background-color: #F7FA4F; color: #1D1F21; text-align: center; font-size: 36px;\",\n        )\n        ui.p(\n        \"Check out the Banana Quality data set on \",\n        ui.a(\"Kaggle\", href=\"https://www.kaggle.com/datasets/mrmars1010/banana-quality-dataset/data\", target=\"_blank\", style=\"color: #007BFF; text-decoration: underline;\"),\n        \".\",\n        style=\"text-align: center; font-size: 16px;\"\n    )\n        ui.p(\n        \"Learn how this app was built at Melissa's \",\n        ui.a(\"GitHub\", href=\"https://github.com/meldstonerogers/cintel-06-custom\", target=\"_blank\", style=\"color: #007BFF; text-decoration: underline;\"),\n        \".\",\n        style=\"text-align: center; font-size: 16px;\"\n    )\n        \nwith ui.layout_column_wrap(fill=False):\n    with ui.value_box(showcase=icon_svg(\"thumbs-up\"), style=\"background-color: #F7936B\"):\n        \"Average Quality Score (out of 4)\"\n\n        @render.text\n        def ave_quality():\n            return f\"{filtered_data()['quality_score'].mean():.1f}\"\n\n    with ui.value_box(showcase=icon_svg(\"weight-hanging\"), style=\"background-color: #F7936B\"):\n        \"Average Banana Weight\"\n\n        @render.text\n        def ave_weight():\n            return f\"{filtered_data()['weight_g'].mean():.1f} g\"\n\n    with ui.value_box(showcase=icon_svg(\"ruler-vertical\"), style=\"background-color: #F7936B\"):\n        \"Average Banana Length\"\n\n        @render.text\n        def age_length():\n            return f\"{filtered_data()['length_cm'].mean():.1f} cm\"\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\n            \"Plotly Bananas Scatterplot\",\n            style=\"background-color: #25CED1; color: ##1D1F21;\",\n        )\n\n        @render_widget\n        def banana_scatterplot():\n            x_column_name = input.x_column_scatter()\n            y_column_name = input.y_column_scatter()\n    \n            # Filter the penguins dataset based on selected species\n            bananas_df = filtered_data().dropna(subset=[x_column_name, y_column_name])\n    \n            # Create scatter plot\n            scatterplot = px.scatter(\n                data_frame = filtered_data(),\n                x=x_column_name,  # X-axis based on user selection\n                y=y_column_name,  # Y-axis based on user selection\n                color=\"region\",  # Color points by species\n                title=f\"{x_column_name} vs {y_column_name}\",\n                labels={x_column_name: x_column_name, y_column_name: y_column_name},  # Custom labels for axes\n                color_discrete_sequence=[\"#FF0000\", \"#0000FF\", \"#008000\", \"#FFFF00\", \"#FFFF00\", \"#FF00FF\", \"#FFA500\", \"#800080\"],  # Custom colors\n                \n            ).update_layout(\n                title={\"text\": f\"{x_column_name} vs {y_column_name}\", \"x\": 0.5},\n                yaxis_title=y_column_name,\n                xaxis_title=x_column_name,\n            )\n    \n            return scatterplot\n\n    with ui.card(full_screen=True):\n        ui.card_header(\n            \"B-A-N-A-N-A-S Data\",\n            style=\"background-color: #25CED1; color: ##1D1F21;\",\n        )\n        @render.data_frame\n        def summary_statistics():\n            cols = [\n                \"region\",\n                \"variety\",\n                \"quality_score\",\n                \"weight_g\",\n                \"length_cm\",\n            ]\n            return render.DataGrid(filtered_data()[cols], filters=True)\n\n\n#ui.include_css(app_dir/ \"docs\" / \"styles.css\")\n\nbananas_df = pd.read_csv(\"/Users/melissastonerogers/Documents/cintel-06-custom/docs/banana_quality_dataset.csv\")\n\n@reactive.calc\ndef filtered_data():\n    isFilterMatch = (\n        bananas_df[\"region\"].isin(input.selected_region_list()) &\n        bananas_df[\"variety\"].isin(input.selected_variety_list())\n    )\n    return bananas_df[isFilterMatch]\n\n# Reactive logic for \"Select All\" functionality\n@reactive.calc\ndef updated_region_selection():\n    selected = input.selected_region_list()  # Get selected options\n\n    # If \"Select All\" is selected, return all options\n    if \"Select All\" in selected:\n        return options\n    return selected\n\n# Display the selected regions\n#@render.text\n#def update_region():\n    selected_regions = updated_region_selection()\n    return f\"Selected regions: {', '.join(selected_regions)}\"", "type": "text"}]